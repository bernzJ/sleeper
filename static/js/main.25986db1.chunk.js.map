{"version":3,"sources":["assets/header.jpg","assets/mattress1.png","assets/mattress2.png","assets/mattress3.png","component/LazyImageLoader.js","assets/colors.js","data/quizs.js","data/site.js","component/quiz.js","component/footer.js","component/App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","div","GImage","img","LazyImageLoader","src","imgProps","useState","class","loaded","setLoaded","className","style","backgroundImage","onLoad","Colors","primary","secondary","font","Quizs","id","question","choices","last","aff","url","mattress","thumbnail","mattress1","mattress2","mattress3","Quiz","props","validateEmail","email","state","value","match","setState","error","activeKey","partitionArray","array","size","map","e","i","slice","filter","genKey","keyCount","finializeQuiz","choice","priceRange","answer3","userAff","find","a","includes","message","answer5","renderLastSlide","Container","Row","onClick","window","open","QuizCol","lg","alt","answer1","answer2","answer4","QuizBox","Accordion","this","Card","CardHeader","fluid","Collapse","eventKey","CardBody","Form","onSubmit","preventDefault","Control","type","placeholder","onChange","target","ErrorLabel","quiz","key","Col","QuizRow","QuizItem","parseInt","toString","React","Component","label","Header","Body","span","Foot","Footer","App","HeaderImg","backgroundSize","QuizWrapper","Boolean","location","hostname","$","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25986db1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.49803d27.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mattress1.0176317e.png\";","module.exports = __webpack_public_path__ + \"static/media/mattress2.6468cdfe.png\";","module.exports = __webpack_public_path__ + \"static/media/mattress3.edaa711b.png\";","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst LazyImageLoader = ({ src, imgProps }) => {\r\n  const [loaded, setLoaded] = useState({\r\n    class: \"blur\",\r\n    src: \"\"\r\n  })\r\n\r\n  /*let img = new Image();\r\n  img.src = src;\r\n  img.onload = () => setLoaded({\r\n    class: \"loaded\",\r\n    src: src\r\n  })*/\r\n\r\n  return (\r\n    <Wrapper className={loaded.class}>\r\n      <div style={{ ...imgProps, backgroundImage: `url(${loaded.src})` }} />\r\n      <GImage src={src} onLoad={() => setLoaded({\r\n        class: \"loaded\",\r\n        src: src\r\n      })} />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nLazyImageLoader.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n&{\r\n  filter: blur(15px);\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n&.loaded{\r\n  filter: blur(0);\r\n  transition: filter .3s;\r\n}\r\n& div {\r\n  opacity: 0;\r\n  height: 100%;\r\n  background-repeat:no-repeat;\r\n  background-position: center;\r\n}\r\n&.loaded div {\r\n  opacity: 1;\r\n  transition: opacity .3s;\r\n}\r\n`\r\nconst GImage = styled.img`\r\ndisplay: none;\r\n`\r\n\r\nexport default LazyImageLoader","const Colors = {\r\n  primary: \"#394b63\",\r\n  secondary: \"#f5f4f2\",\r\n  font: \"#fff\",\r\n};\r\n\r\nexport default Colors;","const Quizs = [\r\n  {\r\n    id: '1',\r\n    question: 'Which mattress size do you want?',\r\n    choices: [\r\n      'King',\r\n      'Queen',\r\n      'Full',\r\n      'Twin XL',\r\n      'Twin',\r\n    ],\r\n  },\r\n  {\r\n    id: '2',\r\n    question: 'Who\\'s sleeping on the mattress?',\r\n    choices: [\r\n      'Just me',\r\n      'Me + partner',\r\n      'Me + partner + child',\r\n      'Me + partner + pet',\r\n      'Me + partner 1 + partner 2',\r\n    ],\r\n  },\r\n  {\r\n    id: '3',\r\n    question: 'What\\'s your budget?',\r\n    choices: [\r\n      'Under $600',\r\n      '$600 - $1000',\r\n      '$1000 - $1500',\r\n      '$1500+',\r\n    ],\r\n  },\r\n  {\r\n    id: '4',\r\n    question: 'What\\'s your sleeping style?',\r\n    choices: [\r\n      'Stomach',\r\n      'Back',\r\n      'Side',\r\n    ],\r\n    last: true,\r\n  },\r\n]\r\n\r\nexport default Quizs;","import mattress1 from '../assets/mattress1.png'\r\nimport mattress2 from '../assets/mattress2.png'\r\nimport mattress3 from '../assets/mattress3.png'\r\n\r\nconst aff = [\r\n  {\r\n    id: '3',\r\n    choices: [\r\n      'Under $600',\r\n      '$600 - $1000',\r\n    ],\r\n    url: 'http://shrsl.com/1pbgg',\r\n    mattress: 'Cheap Bastard',\r\n    thumbnail: mattress1,\r\n  },\r\n  {\r\n    id: '3',\r\n    choices: [\r\n      '$1000 - $1500',\r\n    ],\r\n    url: 'https://shareasale.com/r.cfm?b=1354291&u=2002666&m=69944&urllink=&afftrack=',\r\n    mattress: 'Normal One',\r\n    thumbnail: mattress2,\r\n  },\r\n  {\r\n    id: '3',\r\n    choices: [\r\n      '$1500+',\r\n    ],\r\n    url: 'http://shrsl.com/1pch8',\r\n    mattress: 'Comfy aF',\r\n    thumbnail: mattress3,\r\n  },\r\n];\r\n\r\nexport {\r\n  aff,\r\n}","import React from 'react'\r\n\r\nimport { Accordion, Card, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\nimport Colors from '../assets/colors'\r\nimport Quizs from '../data/quizs'\r\nimport { aff } from '../data/site'\r\n\r\nclass Quiz extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.keyCount = 0;\r\n    this.state = {\r\n      activeKey: '0',\r\n      message: '',\r\n      email: {\r\n        value: false,\r\n        error: '',\r\n      },\r\n      answer1: \"\",\r\n      answer2: \"\",\r\n      answer3: \"\",\r\n      answer4: \"\",\r\n      answer5: \"\",\r\n    }\r\n  }\r\n\r\n  validateEmail = () => {\r\n    let email = this.state.email.value;\r\n    if (email !== false && email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\r\n      this.setState({ email: { value: email, error: '' }, activeKey: '1' })\r\n    } else {\r\n      this.setState({ email: { value: false, error: 'Invalid Email !' }, activeKey: '0' })\r\n    }\r\n  }\r\n\r\n  partitionArray = (array, size) => array.map((e, i) => (i % size === 0) ? array.slice(i, i + size) : null).filter((e) => e)\r\n\r\n  genKey = () => this.keyCount++\r\n\r\n  finializeQuiz = (id, choice) => {\r\n    let priceRange = this.state.answer3\r\n    let userAff = aff.find(a => a.choices.includes(priceRange))\r\n    this.setState({ message: 'Your mattress is ready !', activeKey: '999', answer5: userAff, [`answer${id}`]: choice })\r\n  }\r\n\r\n  renderLastSlide = () => {\r\n    let userAff = this.state.answer5\r\n    return (\r\n      <Container>\r\n        <Row onClick={() => window.open(userAff.url, \"_blank\")}>\r\n          <QuizCol lg=\"12\">\r\n            According to your answers, the {userAff.mattress} mattress is best for you. Click here to check prices !\r\n          </QuizCol>\r\n          <QuizCol lg=\"12\">\r\n            <img src={userAff.thumbnail} alt={userAff.mattress} />\r\n          </QuizCol>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <QuizBox lg=\"6\">\r\n        <Accordion activeKey={this.state.activeKey}>\r\n          <Card>\r\n            <CardHeader onClick={() => this.setState({ activeKey: '0' })}>\r\n              <Container fluid>\r\n                <span>\r\n                  Are you ready to start the quiz ?\r\n                </span>\r\n              </Container>\r\n            </CardHeader>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <CardBody>\r\n                <Form onSubmit={(e) => e.preventDefault() || this.validateEmail()}>\r\n                  <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={(e) => this.setState({ email: { value: e.target.value } })} />\r\n                </Form>\r\n                <ErrorLabel>{this.state.email.error}</ErrorLabel>\r\n              </CardBody>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          {\r\n            Quizs.map(quiz => {\r\n              return (\r\n                <Card key={quiz.id}>\r\n                  <CardHeader>\r\n                    <Container fluid>\r\n                      <Row className=\"justify-content-between\">\r\n                        <Col lg=\"5\">\r\n                          <span>\r\n                            {quiz.question}\r\n                          </span>\r\n                        </Col>\r\n                        <Col lg=\"3\">\r\n                          <span>\r\n                            {this.state[`answer${quiz.id}`]}\r\n                          </span>\r\n                        </Col>\r\n                      </Row>\r\n                    </Container>\r\n                  </CardHeader>\r\n                  <Accordion.Collapse eventKey={quiz.id}>\r\n                    <CardBody>\r\n                      <Container fluid>\r\n                        {\r\n                          this.partitionArray(quiz.choices, 3).map(e =>\r\n                            <QuizRow key={`row-${this.genKey()}`}>\r\n                              {e.map((choice, i) => {\r\n                                return (\r\n                                  <QuizCol key={`col-${this.genKey()}`}>\r\n                                    <QuizItem onClick={() => quiz.last === true ? this.finializeQuiz(quiz.id, choice) : this.setState({ [`answer${quiz.id}`]: choice, activeKey: (parseInt(quiz.id) + 1).toString() })}>\r\n                                      {choice}\r\n                                    </QuizItem>\r\n                                  </QuizCol>\r\n                                )\r\n                              })}\r\n                            </QuizRow>\r\n                          )\r\n                        }\r\n                      </Container>\r\n                    </CardBody>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              )\r\n            })\r\n          }\r\n          <Card>\r\n            <CardHeader onClick={() => this.setState({ activeKey: '999' })}>\r\n              <Container fluid>\r\n                <span>\r\n                  {this.state.message}\r\n                </span>\r\n              </Container>\r\n            </CardHeader>\r\n            <Accordion.Collapse eventKey=\"999\">\r\n              <CardBody>\r\n                {this.state.answer5 !== '' ? this.renderLastSlide() : null}\r\n              </CardBody>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </QuizBox>\r\n    )\r\n  }\r\n}\r\n\r\nconst QuizBox = styled(Col)`\r\n&{\r\n  background-color: rgba(0,0,0,0.1);\r\n  padding: 25px;\r\n}\r\n& span{\r\n  color: ${Colors.font}\r\n}\r\n`\r\nconst ErrorLabel = styled.label`\r\ncolor: red;\r\n`\r\nconst CardHeader = styled(Card.Header)`\r\nbackground-color: ${Colors.primary};\r\n`\r\nconst CardBody = styled(Card.Body)`\r\nbackground-color: ${Colors.secondary};\r\n`\r\nconst QuizRow = styled(Row)`\r\ntext-align: center;\r\n`\r\nconst QuizItem = styled.span`\r\n&{\r\n  color: #fff;\r\n  padding-right: 25px;\r\n  padding-left: 25px;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n  background-color: #c1c1c1;\r\n  display: block;\r\n  width: 100%;\r\n  white-space: nowrap;\r\n}\r\n&:hover, &.selected{\r\n  background-color: ${Colors.primary};\r\n}\r\n`\r\nconst QuizCol = styled(Col)`\r\nmargin-top: 25px;\r\n`\r\n\r\n\r\nexport default Quiz;","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Container, Row } from 'react-bootstrap'\r\n\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Foot>\r\n      © 2020 Something. All rights reserved.\r\n    </Foot>\r\n  )\r\n}\r\n\r\nconst Foot = styled(Row)`\r\npadding: 50px;\r\n`\r\n\r\nexport default Footer;","import React from 'react'\r\nimport { Col, Container, Row } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\nimport HeaderImg from '../assets/header.jpg'\r\nimport LazyImageLoader from './LazyImageLoader'\r\nimport LazyLoader from './LazyLoader'\r\nimport Quiz from './quiz'\r\nimport Footer from './footer'\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Header className=\"w-100\">\r\n          <LazyImageLoader src={HeaderImg} imgProps={{ backgroundSize: 'cover' }} />\r\n        </Header>\r\n        <QuizWrapper className=\"justify-content-center align-items-center\">\r\n          <Quiz />\r\n        </QuizWrapper>\r\n        <Footer />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst Header = styled(Row)`\r\nposition: absolute;\r\nheight: 680px;\r\nz-index: -1;\r\n`\r\nconst QuizWrapper = styled(Row)`\r\nheight: 680px;\r\n`\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport $ from 'jquery'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nimport './assets/font.css'\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nwindow.$ = $;\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}